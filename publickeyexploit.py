import json
import requests
import time
import os
from ecdsa.util import string_to_number
from hashlib import sha256

PROGRESS_FILE = "progress.json"
FOUND_FILE = "found.txt"

def save_progress(address, num_transactions):
    with open(PROGRESS_FILE, "w") as file:
        json.dump({"address": address, "num_transactions": num_transactions}, file)

def load_progress():
    if os.path.exists(PROGRESS_FILE):
        with open(PROGRESS_FILE, "r") as file:
            return json.load(file)
    return None

def fetch_transactions(addr):
    cache_filename = f"cache_{addr}.json"
    if os.path.exists(cache_filename):
        print(f"Using cached data for address {addr}")
        with open(cache_filename, 'r') as cache_file:
            data = json.load(cache_file)
        return data['txs']
    
    url = f'https://blockchain.info/rawaddr/{addr}?limit=100'
    all_txs = []
    
    while True:
        try:
            response = requests.get(url, headers={"Accept-Encoding": "gzip"})
            response.raise_for_status()
            data = response.json()
            all_txs = data['txs']
            with open(cache_filename, 'w') as cache_file:
                json.dump(data, cache_file)
            break
        except requests.exceptions.RequestException as e:
            print(f"Error fetching transactions: {e}, retrying in 5 seconds...")
            time.sleep(5)
    
    return all_txs

def extract_signature(tx):
    sigs = []
    for inp in tx.get('inputs', []):
        if 'script' in inp:
            script = inp['script']
            if len(script) > 140:
                sig = script[4:138]
                sigs.append(sig)
    return sigs

def check_r_reuse(signatures):
    r_values = []
    reused_r = {}

    for sig in signatures:
        r = sig[:64]
        if r in r_values:
            if r in reused_r:
                reused_r[r].append(sig)
            else:
                reused_r[r] = [sig]
        r_values.append(r)
    
    return reused_r

def check_weak_rng(signatures):
    r_values = [string_to_number(bytes.fromhex(sig[:64])) for sig in signatures]
    if len(set(r_values)) < len(r_values) * 0.5:
        return True
    return False

def extract_public_key(tx):
    pubkeys = []
    for inp in tx.get('inputs', []):
        if 'script' in inp:
            script = inp['script']
            if len(script) > 180:
                pubkey = script[-130:]
                if pubkey.startswith("04") or pubkey.startswith("02") or pubkey.startswith("03"):
                    pubkeys.append(pubkey)
    return pubkeys

def analyze_address(addr):
    transactions = fetch_transactions(addr)
    if not transactions:
        print(f"No transactions found for {addr}.")
        return
    
    print(f"Analyzing {len(transactions)} transactions for address {addr}...\n")

    for tx in transactions:
        signatures = extract_signature(tx)
        if not signatures:
            continue
        
        reused_r = check_r_reuse(signatures)
        weak_rng = check_weak_rng(signatures)
        exposed_pubkeys = extract_public_key(tx)

        if reused_r or weak_rng or exposed_pubkeys:
            with open(FOUND_FILE, "a") as file:
                file.write(f"Address: {addr}\nTransaction: {tx['hash']}\n")

            if reused_r:
                print(f"ðŸ”´ Reused R-value found in {tx['hash']}")
                with open(FOUND_FILE, "a") as file:
                    file.write(f"Reused R-values: {reused_r}\n")

            if weak_rng:
                print(f"ðŸŸ  Weak RNG detected in {tx['hash']}")
                with open(FOUND_FILE, "a") as file:
                    file.write(f"Weak RNG detected.\n")

            if exposed_pubkeys:
                print(f"ðŸŸ¢ Public key exposed in {tx['hash']}: {exposed_pubkeys[0]}")
                with open(FOUND_FILE, "a") as file:
                    file.write(f"Exposed Public Key: {exposed_pubkeys[0]}\n")

            with open(FOUND_FILE, "a") as file:
                file.write("\n")
    
    print(f"Analysis completed for {addr}.")

def main():
    print("Welcome to the CRYPTOGRAPHYTUBE Private Key Extraction Script!")

    progress = load_progress()
    
    if progress:
        print(f"Resuming from address: {progress['address']} with {progress['num_transactions']} transactions.")
        address_file = input("Enter the path to the Bitcoin address file (same file as before): ")
    else:
        address_file = input("Enter the path to the Bitcoin address file: ")
    
    with open(address_file, 'r') as file:
        addresses = file.readlines()

    if progress:
        start_index = addresses.index(progress["address"] + "\n")
    else:
        start_index = 0

    for addr in addresses[start_index:]:
        addr = addr.strip()
        print(f"Processing address: {addr}")
        analyze_address(addr)
        save_progress(addr, len(fetch_transactions(addr)))
        print("Waiting for 5 seconds before processing next address...")
        time.sleep(5)

if __name__ == "__main__":
    main()
